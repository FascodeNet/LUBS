#!/usr/bin/env bash

set -e -u

export LANG=C


arch=amd64
work_dir="work"
script_path=$(readlink -f ${0%/*})
codename="bionic"
mirror="http://ftp.jaist.ac.jp/pub/Linux/ubuntu/"


# Show an INFO message
# _msg_info <message>
_msg_info () {
    local _msg="${@}"
    echo "[LUBS Core] INFO: ${_msg}"
}

# Show an ERROR message then exit with status
# _msg_error <message> <exit code>
_msg_error() {
    local _msg="${1}"
    local _error=${2}
    echo "[LUBS Core] ERROR: ${_msg}" >&2
    if [[ ! ${_error} = 0 ]]; then
        exit ${_error}
    fi
}


# Helper function to run make_*() only one time.
run_once() {
    if [[ ! -e "${work_dir}/build.${1}" ]]; then
        "$1"
        touch "${work_dir}/build.${1}"
    fi
}


run_cmd () {
    "${script_path}/lubs-chroot" "${work_dir}/airootfs" ${@}
}

_apt_install () {
    run_cmd apt-get --yes install ${@}
}




prepare_build () {
    if [[ ${EUID} -ne 0 ]]; then
        _msg_error "This script must be run as root." 1
    fi
    
    [[ ! -d "${work_dir}" ]] && mkdir -p "${work_dir}"

    local mount
    for mount in $(mount | awk '{print $3}' | grep $(realpath ${work_dir})); do
        _msg_info "Unmounting ${mount}"
        umount "${mount}"
    done

}


make_basefs () {
    _msg_info "Installing Ubuntu to '${work_dir}/airootfs/'..."
    mkdir -p ${work_dir}/airootfs
    debootstrap --arch=${arch} --include=linux-image-generic  --verbose --merged-usr "${codename}" "${work_dir}/airootfs" ${mirror}
    echo 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:${PATH}' >> "${work_dir}/airootfs/etc/bash.bashrc"
    run_cmd apt-get update
    # run_cmd apt-get upgrade
    _msg_info "${codename} installed successfully!"
}

make_sourcelist () {
    cp ${script_path}/source.list.d/${codename}/* ${work_dir}/airootfs/etc/apt
}

make_packages () {
    run_cmd apt-get update
    installpkglist=($(grep -h -v ^'#' ${script_path}/packages.x86_64))
    run_cmd sudo -i apt-get --yes install ${installpkglist[@]}
}

make_customize_airootfs() {
    # Overwrite airootfs with customize_airootfs.
    cp -af "${script_path}/airootfs" "${work_dir}/x86_64"

    if [[ -f ${work_dir}/airootfs/root/customize_airootfs.sh ]]; then
    	chmod 755 "${work_dir}/airootfs/root/customize_airootfs.sh"
        run_cmd bash "${work_dir}/airootfs/root/customize_airootfs.sh"
    fi
}

prepare_build
run_once make_basefs
run_once make_sourcelist
run_once make_packages
run_once make_customize_airootfs
