#!/usr/bin/env bash

set -e -u

export LANG=C


arch=amd64
work_dir="work"
cache_dir="${work_dir}/cache"
out_dir="${work_dir}/out"
script_path=$(readlink -f ${0%/*})
channels_dir="${script_path}/channels"
codename="focal"
mirror="http://ftp.jaist.ac.jp/pub/Linux/ubuntu/"

os_name="Ubuntu"
iso_name="ubuntu"
iso_label="${os_name}_${codename}_${arch}"
iso_publisher='Fascode Network <https://fascode.net>'
iso_application="${os_name} Live/Rescue CD"
iso_version="${codename}-$(date +%Y.%m.%d)"
iso_filename="${iso_name}-${iso_version}-${arch}.iso"


# Show an INFO message
# _msg_info <message>
_msg_info () {
    local _msg="${@}"
    "${script_path}/echo_color"  -t 36 "[LUBS Core]" /! -t 32 "INFO:" "/#${_msg}"
}

# Show an ERROR message then exit with status
# _msg_error <message> <exit code>
_msg_error() {
    local _msg="${1}"
    local _error=${2}
    "${script_path}/echo_color" -t 36 "[LUBS Core]" /! -t 31 "ERROR:" "/#${_msg}" >&2
    if [[ ! ${_error} = 0 ]]; then
        exit ${_error}
    fi
}

_msg_start () {
    _msg_info "make ${1} is starting."
}

_msg_end () {
    _msg_info "make ${1} was done!"
}

# Helper function to run make_*() only one time.
run_once() {
    local name
    if [[ "run_out" == "$1" ]]; then
        name="$2"
    else
        name="$1"
    fi

    if [[ ! -e "${work_dir}/build.${name}" ]]; then
        if [[ "run_out" == "$1" ]]; then
            "$1" "$2"
        else
            "$1"
        fi

        touch "${work_dir}/build.${name}"
    fi
}

run_cmd () {
    "${script_path}/lubs-chroot" "${work_dir}/airootfs" ${@}
}

run_out () {
    cd "${out_dir}"
    "$1"
    cd - > /dev/null
}

_apt_install () {
    run_cmd apt-get --yes install ${@}
}




prepare_build () {
    if [[ ${EUID} -ne 0 ]]; then
        _msg_error "This script must be run as root." 1
    fi
    
    [[ ! -d "${work_dir}" ]] && mkdir -p "${work_dir}"

    local mount
    for mount in $(mount | awk '{print $3}' | grep $(realpath ${work_dir}) | sort -r); do
        _msg_info "Unmounting ${mount}"
        umount "${mount}"
    done

}


make_basefs () {
    local job_name
    job_name="basefs"
    _msg_start "${job_name}"

    if [[ ! -d "${cache_dir}/${codename}" ]]; then
        _msg_info "Installing Ubuntu to '${cache_dir}/${codename}'..."
        mkdir -p "${cache_dir}/${codename}"
        debootstrap --arch=${arch} --include=linux-image-generic  --verbose --merged-usr "${codename}" "${cache_dir}/${codename}" ${mirror}
        _msg_info "${codename} installed successfully!"
    else
        _msg_info "${codename} cache is found."
    fi
    
    rm -rf "${work_dir}/airootfs" && mkdir -p "${work_dir}/airootfs"
    _msg_info "copy base files from '${cache_dir}/${codename}' to '${work_dir}/airootfs'..."
    rsync  -au "${cache_dir}/${codename}/" "${work_dir}/airootfs"
    echo 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:${PATH}' >> "${work_dir}/airootfs/etc/bash.bashrc"
    run_cmd apt-get update
    # run_cmd apt-get upgrade

    _msg_end "${job_name}"
}

make_sourcelist () {
    local job_name
    job_name="sourcelist"
    _msg_start "${job_name}"

    cp ${script_path}/source.list.d/${codename}/* ${work_dir}/airootfs/etc/apt

    _msg_end "${job_name}"
}

make_systemd() {
    local job_name
    job_name="systemd"
    _msg_start "${job_name}"

    _apt_install systemd-sysv
    run_cmd dbus-uuidgen > /etc/machine-id
    run_cmd ln -fs /etc/machine-id /var/lib/dbus/machine-id

    _msg_end "${job_name}"
}

make_packages () {
    local job_name
    job_name="packages"
    _msg_start "${job_name}"

    run_cmd apt-get update
    installpkglist=($(grep -h -v ^'#' ${script_path}/packages.x86_64))
    run_cmd sudo -i apt-get --yes install ${installpkglist[@]}

    _msg_end "${job_name}"
}

make_config() {
    local job_name
    job_name="config"
    _msg_start "${job_name}"

    # Locales
    run_cmd env -i bash -c 'DEBIAN_FRONTEND=noninteractive LANG=en_US.UTF-8 LC_ALL=C LANGUAGE=en_US.UTF-8 dpkg-reconfigure locales'

    # resolvconf
    run_cmd env -i bash -c 'DEBIAN_FRONTEND=noninteractive dpkg-reconfigure resolvconf'

    # NetworkManager
    cp ${channels_dir}/share/airootfs/etc/NetworkManager/NetworkManager.conf ${work_dir}/airootfs/etc/NetworkManager/NetworkManager.conf

    # Timezone
    #run_cmd echo -ne "UTC" > '/etc/timezone'
    #run_cmd dpkg-reconfigure -f noninteractive tzdata

    run_cmd env -i bash -c 'DEBIAN_FRONTEND=noninteractive dpkg-reconfigure network-manager'
    run_cmd truncate -s 0 /etc/machine-id

    _msg_end "${job_name}"
}

make_customize_airootfs() {
    local job_name
    job_name="customize airootfs"
    _msg_start "${job_name}"

    # Overwrite airootfs with customize_airootfs.
    cp -af "${channels_dir}/share/airootfs" "${work_dir}"

    if [[ -f "${work_dir}/airootfs/root/customize_airootfs.sh" ]]; then
    	chmod 755 "${work_dir}/airootfs/root/customize_airootfs.sh"
        run_cmd "/root/customize_airootfs.sh"
    fi

    _msg_end "${job_name}"
}

make_clean() {
    local job_name
    job_name="clean"
    _msg_start "${job_name}"

    run_cmd apt-get clean
    run_cmd apt-get --yes autoremove
    run_cmd rm -rf "/tmp/* ~/.bash_history"

    _msg_end "${job_name}"
}

make_bootfiles() {
    local job_name
    job_name="boot files"
    _msg_start "${job_name}"

    run_cmd update-initramfs -c -k all
    _apt_install memtest86+
    mkdir -p ${out_dir}/{casper,isolinux,install}
    cp ${work_dir}/airootfs/boot/vmlinuz-*-*-generic ${out_dir}/casper/vmlinuz
    cp ${work_dir}/airootfs/boot/initrd.img-*-*-generic ${out_dir}/casper/initrd
    cp ${work_dir}/airootfs/boot/memtest86+.bin ${out_dir}/install/memtest86+

    if [[ ! -f "${cache_dir}/memtest86-usb.zip" ]]; then
        wget -O ${cache_dir}/memtest86-usb.zip https://www.memtest86.com/downloads/memtest86-usb.zip
    fi

    (unzip -p ${cache_dir}/memtest86-usb.zip memtest86-usb.img > ${out_dir}/install/memtest86)

    _msg_end "${job_name}"
}

make_grubcfg() {
local job_name
job_name="grubcfg"
_msg_start "${job_name}"

touch "${out_dir}/ubuntu"
cat <<EOF > ${out_dir}/isolinux/grub.cfg

search --set=root --file /ubuntu

insmod all_video

set default="0"
set timeout=30

menuentry "Try Ubuntu FS without installing" {
   linux /casper/vmlinuz boot=casper quiet splash ---
   initrd /casper/initrd
}

menuentry "Install Ubuntu FS" {
   linux /casper/vmlinuz boot=casper only-ubiquity quiet splash ---
   initrd /casper/initrd
}

menuentry "Check disc for defects" {
   linux /casper/vmlinuz boot=casper integrity-check quiet splash ---
   initrd /casper/initrd
}

menuentry "Test memory Memtest86+ (BIOS)" {
   linux16 /install/memtest86+
}

menuentry "Test memory Memtest86 (UEFI, long load time)" {
   insmod part_gpt
   insmod search_fs_uuid
   insmod chain
   loopback loop /install/memtest86
   chainloader (loop,gpt1)/efi/boot/BOOTX64.efi
}
EOF

_msg_end "${job_name}"
}

make_manifest() {
    local job_name
    job_name="manifest"
    _msg_start "${job_name}"

    run_cmd dpkg-query -W --showformat='${Package} ${Version}\n' | tee ${out_dir}/casper/filesystem.manifest
    cp -v ${out_dir}/casper/filesystem.manifest "${out_dir}/casper/filesystem.manifest-desktop"
    sed -i '/ubiquity/d' "${out_dir}/casper/filesystem.manifest-desktop"
    sed -i '/casper/d' "${out_dir}/casper/filesystem.manifest-desktop"
    sed -i '/discover/d' "${out_dir}/casper/filesystem.manifest-desktop"
    sed -i '/laptop-detect/d' "${out_dir}/casper/filesystem.manifest-desktop"
    sed -i '/os-prober/d' "${out_dir}/casper/filesystem.manifest-desktop"

    _msg_end "${job_name}"
}

make_squashfs() {
    local job_name
    job_name="squashfs"
    _msg_start "${job_name}"

    mksquashfs "${work_dir}/airootfs" "${out_dir}/casper/filesystem.squashfs"
    printf $(du -sx --block-size=1 "${work_dir}/airootfs" | cut -f1) > ${out_dir}/casper/filesystem.size

    _msg_end "${job_name}"
}

make_deifnes() {
local job_name
job_name="defines"
_msg_start "${job_name}"

cat <<EOF > ${out_dir}/README.diskdefines
#define DISKNAME  Ubuntu from scratch
#define TYPE  binary
#define TYPEbinary  1
#define ARCH  amd64
#define ARCHamd64  1
#define DISKNUM  1
#define DISKNUM1  1
#define TOTALNUM  0
#define TOTALNUM0  1
EOF

_msg_end "${job_name}"
}

make_isolinux() {
    local job_name
    job_name="isolinux"
    _msg_start "${job_name}"

    grub-mkstandalone \
        --format=x86_64-efi \
        --output=isolinux/bootx64.efi \
        --locales="" \
        --fonts="" \
        "boot/grub/grub.cfg=isolinux/grub.cfg"
    (
        cd isolinux && \
        dd if=/dev/zero of=efiboot.img bs=1M count=10 && \
        sudo mkfs.vfat efiboot.img && \
        LC_CTYPE=C mmd -i efiboot.img efi efi/boot && \
        LC_CTYPE=C mcopy -i efiboot.img ./bootx64.efi ::efi/boot/
    )
    grub-mkstandalone \
        --format=i386-pc \
        --output=isolinux/core.img \
        --install-modules="linux16 linux normal iso9660 biosdisk memdisk search tar ls" \
        --modules="linux16 linux normal iso9660 biosdisk search" \
        --locales="" \
        --fonts="" \
        "boot/grub/grub.cfg=isolinux/grub.cfg"
    cat /usr/lib/grub/i386-pc/cdboot.img isolinux/core.img > isolinux/bios.img

    _msg_end "${job_name}"
}

make_md5sum() {
    local job_name
    job_name="md5sum"
    _msg_start "${job_name}"

    /bin/bash -c "(find . -type f -print0 | xargs -0 md5sum | grep -v "\./md5sum.txt" > md5sum.txt)"

    _msg_end "${job_name}"
}

make_iso() {
    local job_name
    job_name="iso"
    _msg_start "${job_name}"

    xorriso \
        -as mkisofs \
        -iso-level 3 \
        -full-iso9660-filenames \
        -volid "${iso_label}" \
        -appid "${iso_application}" \
        -publisher "${iso_publisher}" \
        -preparer "prepared by LUBS" \
        -eltorito-boot boot/grub/bios.img \
        -no-emul-boot \
        -boot-load-size 4 \
        -boot-info-table \
        --eltorito-catalog boot/grub/boot.cat \
        --grub2-boot-info \
        --grub2-mbr /usr/lib/grub/i386-pc/boot_hybrid.img \
        -eltorito-alt-boot \
        -e EFI/efiboot.img \
        -no-emul-boot \
        -append_partition 2 0xef isolinux/efiboot.img \
        -output "../${iso_filename}" \
        -graft-points \
            "." \
            /boot/grub/bios.img=isolinux/bios.img \
            /EFI/efiboot.img=isolinux/efiboot.img
    
    _msg_end "${job_name}"
}

prepare_build
run_once make_basefs
run_once make_sourcelist
run_once make_systemd
run_once make_packages
run_once make_config
run_once make_customize_airootfs
run_once make_clean
run_once make_bootfiles
run_once make_grubcfg
run_once make_manifest
run_once make_squashfs
run_once make_deifnes
run_once run_out make_isolinux
run_once run_out make_md5sum
run_once run_out make_iso
