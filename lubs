#!/usr/bin/env bash

set -e -u

export LANG=C

script_path=$(readlink -f ${0%/*})
channels_dir="${script_path}/channels"
isolinux_dir="${script_path}/isolinux"

codename="focal"
mirror="http://ftp.jaist.ac.jp/pub/Linux/ubuntu/"
os_name="Ubuntu"
iso_name="ubuntu"

arch=amd64
work_dir="${script_path}/work"
out_dir="${script_path}/out"
iso_label="${os_name}_${codename}_${arch}"
iso_publisher='Fascode Network <https://fascode.net>'
iso_application="${os_name} Live/Rescue CD"
iso_version="${codename}-$(date +%Y.%m.%d)"
iso_filename="${iso_name}-${iso_version}-${arch}.iso"

channel_name="serene"


# Show an INFO message
# _msg_info <message>
_msg_info() {
    local _msg="${@}"
    "${script_path}/echo_color"  -t 36 "[LUBS Core]" /! -t 32 "INFO:" "/#" -t 0 "${_msg}"
}

# Show an ERROR message then exit with status
# _msg_error <message> <exit code>
_msg_error() {
    local _msg="${1}"
    local _error=${2}
    "${script_path}/echo_color" -t 36 "[LUBS Core]" /! -t 31 "ERROR:" "/#" -t 0 "${_msg}" >&2
    if [[ ! ${_error} = 0 ]]; then
        exit ${_error}
    fi
}

# Helper function to run make_*() only one time.
run_once() {
    local name

    if [[ "run_bootfiles" == "$1" ]]; then
        name="$2"
    else
        name="$1"
    fi

    if [[ ! -e "${work_dir}/build.${name}" ]]; then
        _msg_info "$(echo $name | sed "s@_@ @g") is starting."

        if [[ "run_bootfiles" == "$1" ]]; then
            "$1" "$2"
        else
            "$1"
        fi

        _msg_info "$(echo $name | sed "s@_@ @g") was done!"
        touch "${work_dir}/build.${name}"
    fi
}

run_cmd() {
    "${script_path}/lubs-chroot" "${work_dir}/airootfs" "${@}"
}

run_bootfiles() {
    cd "${bootfiles_dir}"
    "$1"
    cd - > /dev/null
}

_apt_install() {
    run_cmd apt-get --no-install-recommends --yes install ${@}
}

# Show help
_usage () {
    echo "usage ${0} [options] [channel]"
    echo
    echo " General options:"
    echo
    echo "    -a                 Set architecture"
    echo "                        Default: ${arch}"
    echo "    -c                 Set ubuntu codename"
    echo "                        Default; ${codename}"
    echo "    -m                 Set apt mirror server."
    echo "                        ${mirror}"
    echo "    -o <out_dir>       Set the output directory"
    echo "                        Default: ${out_dir}"
    echo "    -w <work_dir>      Set the working directory"
    echo "                        Default: ${work_dir}"
    echo
    echo "    -h                 This help message and exit"
    echo
}


prepare_build() {
    if [[ ${EUID} -ne 0 ]]; then
        _msg_error "This script must be run as root." 1
    fi
    
    [[ ! -d "${work_dir}" ]] && mkdir -p "${work_dir}"
    [[ ! -d "${out_dir}" ]] && mkdir -p "${out_dir}"

    local mount
    for mount in $(mount | awk '{print $3}' | grep $(realpath ${work_dir}) | sort -r); do
        _msg_info "Unmounting ${mount}"
        umount "${mount}"
    done

}


make_basefs() {
    if [[ ! -d "${cache_dir}/${codename}" ]]; then
        _msg_info "Installing Ubuntu to '${cache_dir}/${codename}'..."
        mkdir -p "${cache_dir}/${codename}"
        debootstrap --arch=${arch} --include=linux-image-generic  --verbose --merged-usr "${codename}" "${cache_dir}/${codename}" ${mirror}
        _msg_info "${codename} installed successfully!"
    else
        _msg_info "${codename} cache is found."
    fi
    
    rm -rf "${work_dir}/airootfs" && mkdir -p "${work_dir}/airootfs"
    _msg_info "copy base files from '${cache_dir}/${codename}' to '${work_dir}/airootfs'..."
    rsync  -au "${cache_dir}/${codename}/" "${work_dir}/airootfs"
    echo 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:${PATH}' >> "${work_dir}/airootfs/etc/bash.bashrc"
    run_cmd apt-get update
    # run_cmd apt-get upgrade
}

make_sourcelist() {
    cp ${script_path}/source.list.d/${codename}/* ${work_dir}/airootfs/etc/apt
    run_cmd apt-get update

    if [[ -f "${channels_dir}/${channel_name}/${channel_name}.list" ]] && [[ -f "${channels_dir}/${channel_name}/${channel_name}-list_key" ]]; then
        source ${channels_dir}/${channel_name}/${channel_name}-list_key

        if [[ ! -f "${cache_dir}/${channel_name}.key" ]]; then
            wget -q -O ${cache_dir}/${channel_name}.key "${url}"
        fi

        _apt_install gnupg
        cp ${cache_dir}/${channel_name}.key ${work_dir}/airootfs/${channel_name}.key
        run_cmd apt-key add ${channel_name}.key
        cp ${channels_dir}/${channel_name}/${channel_name}.list ${work_dir}/airootfs/etc/apt/sources.list.d
        run_cmd apt-get update
    fi
}

make_systemd() {
    _apt_install systemd-sysv
    run_cmd dbus-uuidgen > /etc/machine-id
    run_cmd ln -fs /etc/machine-id /var/lib/dbus/machine-id
}

make_packages() {
    grep -h -v ^'#' "${channels_dir}/share/packages.x86_64" | grep -v "^$" > "${work_dir}/airootfs/installpkglist"
    grep -h -v ^'#' "${channels_dir}/${channel_name}/packages.x86_64" | grep -v "^$" >> "${work_dir}/airootfs/installpkglist"
    run_cmd env -i bash -c 'DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends --yes install $(echo $(<installpkglist))'
    rm ${work_dir}/airootfs/installpkglist
}

make_config() {
    # Locales
    run_cmd env -i bash -c 'DEBIAN_FRONTEND=noninteractive LANG=en_US.UTF-8 LC_ALL=C LANGUAGE=en_US.UTF-8 dpkg-reconfigure locales'

    # resolvconf
    run_cmd env -i bash -c 'DEBIAN_FRONTEND=noninteractive dpkg-reconfigure resolvconf'

    # NetworkManager
    cp ${channels_dir}/share/airootfs/etc/NetworkManager/NetworkManager.conf ${work_dir}/airootfs/etc/NetworkManager/NetworkManager.conf

    # Timezone
    #run_cmd echo -ne "UTC" > '/etc/timezone'
    #run_cmd dpkg-reconfigure -f noninteractive tzdata

    run_cmd env -i bash -c 'DEBIAN_FRONTEND=noninteractive dpkg-reconfigure network-manager'
    run_cmd truncate -s 0 /etc/machine-id
}

make_customize_airootfs() {
    # Overwrite airootfs with customize_airootfs.
    local copy_airootfs

    copy_airootfs() {
        local i 
        for i in "${@}"; do
            local _dir="${1%/}"
            if [[ -d "${_dir}" ]]; then
                cp -af "${_dir}"/* "${work_dir}/airootfs"
            fi
        done
    }

    copy_airootfs "${channels_dir}/share/airootfs"
    copy_airootfs "${channels_dir}/${channel_name}/airootfs"

    if [[ -f "${work_dir}/airootfs/root/customize_airootfs.sh" ]]; then
        chmod 755 "${work_dir}/airootfs/root/customize_airootfs.sh"
        run_cmd "/root/customize_airootfs.sh"
    fi
}

make_clean() {
    run_cmd apt-get clean
    run_cmd apt-get --yes autoremove
    run_cmd rm -rf "/tmp/* ~/.bash_history"
}

make_bootfiles() {
    run_cmd update-initramfs -c -k all
    _apt_install memtest86+
    mkdir -p ${bootfiles_dir}/{casper,isolinux,install}
    cp ${work_dir}/airootfs/boot/vmlinuz-*-*-generic ${bootfiles_dir}/casper/vmlinuz
    cp ${work_dir}/airootfs/boot/initrd.img-*-*-generic ${bootfiles_dir}/casper/initrd
    cp ${work_dir}/airootfs/boot/memtest86+.bin ${bootfiles_dir}/install/memtest86+

    if [[ ! -f "${cache_dir}/memtest86-usb.zip" ]]; then
        wget -O ${cache_dir}/memtest86-usb.zip https://www.memtest86.com/downloads/memtest86-usb.zip
    fi

    (unzip -p ${cache_dir}/memtest86-usb.zip memtest86-usb.img > ${bootfiles_dir}/install/memtest86)
}

make_grubcfg() {
    touch "${bootfiles_dir}/ubuntu"
    cp ${isolinux_dir}/grub.cfg ${bootfiles_dir}/isolinux/grub.cfg
}

make_manifest() {
    run_cmd dpkg-query -W --showformat='${Package} ${Version}\n' | tee ${bootfiles_dir}/casper/filesystem.manifest
    cp -v ${bootfiles_dir}/casper/filesystem.manifest "${bootfiles_dir}/casper/filesystem.manifest-desktop"
    sed -i '/ubiquity/d' "${bootfiles_dir}/casper/filesystem.manifest-desktop"
    sed -i '/casper/d' "${bootfiles_dir}/casper/filesystem.manifest-desktop"
    sed -i '/discover/d' "${bootfiles_dir}/casper/filesystem.manifest-desktop"
    sed -i '/laptop-detect/d' "${bootfiles_dir}/casper/filesystem.manifest-desktop"
    sed -i '/os-prober/d' "${bootfiles_dir}/casper/filesystem.manifest-desktop"
}

make_squashfs() {
    mksquashfs "${work_dir}/airootfs" "${bootfiles_dir}/casper/filesystem.squashfs"
    printf $(du -sx --block-size=1 "${work_dir}/airootfs" | cut -f1) > ${bootfiles_dir}/casper/filesystem.size
}

make_deifnes() {
    cp ${isolinux_dir}/README.diskdefines ${bootfiles_dir}/README.diskdefines
}

make_isolinux() {
    grub-mkstandalone \
        --format=x86_64-efi \
        --output=isolinux/bootx64.efi \
        --locales="" \
        --fonts="" \
        "boot/grub/grub.cfg=isolinux/grub.cfg"
    (
        cd isolinux && \
        dd if=/dev/zero of=efiboot.img bs=1M count=10 && \
        sudo mkfs.vfat efiboot.img && \
        LC_CTYPE=C mmd -i efiboot.img efi efi/boot && \
        LC_CTYPE=C mcopy -i efiboot.img ./bootx64.efi ::efi/boot/
    )
    grub-mkstandalone \
        --format=i386-pc \
        --output=isolinux/core.img \
        --install-modules="linux16 linux normal iso9660 biosdisk memdisk search tar ls" \
        --modules="linux16 linux normal iso9660 biosdisk search" \
        --locales="" \
        --fonts="" \
        "boot/grub/grub.cfg=isolinux/grub.cfg"
    cat /usr/lib/grub/i386-pc/cdboot.img isolinux/core.img > isolinux/bios.img
}

make_md5sum() {
    /bin/bash -c "(find . -type f -print0 | xargs -0 md5sum | grep -v "\./md5sum.txt" > md5sum.txt)"
}

make_iso() {
    xorriso \
        -as mkisofs \
        -iso-level 3 \
        -full-iso9660-filenames \
        -volid "${iso_label}" \
        -appid "${iso_application}" \
        -publisher "${iso_publisher}" \
        -preparer "prepared by LUBS" \
        -eltorito-boot boot/grub/bios.img \
        -no-emul-boot \
        -boot-load-size 4 \
        -boot-info-table \
        --eltorito-catalog boot/grub/boot.cat \
        --grub2-boot-info \
        --grub2-mbr /usr/lib/grub/i386-pc/boot_hybrid.img \
        -eltorito-alt-boot \
        -e EFI/efiboot.img \
        -no-emul-boot \
        -append_partition 2 0xef isolinux/efiboot.img \
        -output "${out_dir}/${iso_filename}" \
        -graft-points \
            "." \
            /boot/grub/bios.img=isolinux/bios.img \
            /EFI/efiboot.img=isolinux/efiboot.img
}

make_checksum() {
    cd ${out_dir}
    _msg_info "Creating md5 checksum ..."
    md5sum "${iso_filename}" > "${iso_filename}.md5"

    _msg_info "Creating sha256 checksum ..."
    sha256sum "${iso_filename}" > "${iso_filename}.sha256"
    cd - > /dev/null 2>&1
}


# Parse options
while getopts 'w:o:ha:-:m:c:' arg; do
    case "${arg}" in
        w) work_dir="${OPTARG}" ;;
        o) out_dir="${OPTARG}" ;;
        h) _usage; exit 0 ;;
        a) arch="${OPTARG}" ;;
        c) codename="${OPTARG}" ;;
        m) mirror="${OPTARG}" ;;
        -)
            case "${OPTARG}" in
                help) _usage; exit 0 ;;
                *)
                    _msg_error "Invalid argument '${OPTARG}'"
                    _usage 1
                    ;;
            esac
            ;;
        *)
           _msg_error "Invalid argument '${arg}'"
           _usage 1
           ;;
    esac
done

cache_dir="${work_dir}/cache"
bootfiles_dir="${work_dir}/bootfiles"


prepare_build
run_once make_basefs
run_once make_sourcelist
run_once make_systemd
run_once make_packages
run_once make_config
run_once make_customize_airootfs
run_once make_clean
run_once make_bootfiles
run_once make_grubcfg
run_once make_manifest
run_once make_squashfs
run_once make_deifnes
run_once run_bootfiles make_isolinux
run_once run_bootfiles make_md5sum
run_once run_bootfiles make_iso
run_once make_checksum
